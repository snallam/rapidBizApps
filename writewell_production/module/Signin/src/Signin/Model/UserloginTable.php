<?php
namespace Signin\Model;
use Zend\Db\TableGateway\TableGateway;
use Signin\Model\UserloginModel;
use Zend\Db\Sql\Select;

class UserloginTable {

	protected $tableGateway;

    public function __construct(TableGateway $tableGateway)
	 {
		 $this->tableGateway = $tableGateway;
		 }


		 public function signinUser($signin)
		 {
		 	//user enter the password.
		 	$password= $signin->password;
		 	/* To generate the salt, first generate enough random bytes. Because
		 	 * base64 returns one character for each 6 bits, the we should generate
		 	* at least 22*6/8=16.5 bytes, so we generate 22. Then we get the first
		 	* 22 base64 characters
		 	*
		 	* those are generated by the combination of password + substring of password and inserted value.
		 	*/
		 	//retrive the username and password from the table.
		 	$select= new Select();
		 	$select->from('user_table');
		 	$select->where(array('email' => $signin->username));

		 	$rowset = $this->tableGateway->selectWith($select);
		 	$row = $rowset->current();

		 	if(!$row) // if useremail is not found in the  table return 0.
		 		return 0;
		 	else
		 	{
		 		$passnew= $password.substr($password,-3).$row->created_date;
		 		$salt = substr(str_replace('+', '.', base64_encode(sha1($passnew))), 0, 22); // the salt we are generating are further encrypted by sh1 algorithm.
		 		//$newsalt= crypt($salt); //for more security crypt the salt.

		 		// 2y is the bcrypt algorithm selector.
		 		// 15 is the workload factor.
		 		$hash = crypt($password, '$2y$15$' . $salt);
		  		if($hash == $row->password) // if email match with the row in the table match the password with the hash generated.
		 			return 1;  // return the user id after valid user name and password.
		 		else
		 			return 0;
		 	}


		 }

		 public function fetchAll()
		 {
			 $resultSet = $this->tableGateway->select();
			 return $resultSet;
			 }

			 public function getUser($id)
			 {
				 $user_id = (int) $id;
				 $rowset = $this->tableGateway->select(array('user_id' => $id));
				 $row = $rowset->current();
				 return $row;
			 }

			 public function getUserIdbyEmail(UserloginModel $userreg)
			 {
			 	$rowset = $this->tableGateway->select(array('email' => $userreg->email));
			 	$row = $rowset->current();


			 	if(!$row)
			 		return 0;
			 	else
			 	    return $row->user_id;

			 }

			 public function forgetpassword( $user_email)
			 {
			 	$rowset = $this->tableGateway->select(array('user_email' => $user_email));
			 	$row = $rowset->current();
			 	if(!$row)
			 		return 0;
			 	else
			 		return $row->user_id;

			 }


			 public function savenewuser(UserloginModel $userreg)
			 {

			 	$password= $userreg->password;

			 	$date =  date("Y-m-d h:i:s");
			 	$passnew= $password.substr($password,-3).$date;


			 	$salt = substr(str_replace('+', '.', base64_encode(sha1($passnew))), 0, 22); // the salt we are generating are further encrypted by sh1 algorithm.
			 	//$newsalt= crypt($salt); //for more security crypt the salt.
			 	// 2y is the bcrypt algorithm selector.
			 	// 15 is the workload factor.

			 	$hash = crypt($password, '$2y$15$' . $salt);

                if ($this->getUserIdbyEmail($userreg)!=0)
                	return 0;


			 	$data = array (
			 		'email' =>$userreg->email,
			 		'password' =>$hash,
			 		'status'=>'N',
			 		'created_date'=>$date,



			 	);
			 	$this->tableGateway->insert($data);
			 	$id = $this->tableGateway->lastInsertValue;
			 	return $id;
			 }


			 //retrive the password send by mail
			 public function userverify($signin,$password)
			 {
			 	//user enter the password.
			 	/* To generate the salt, first generate enough random bytes. Because
			 	 * base64 returns one character for each 6 bits, the we should generate
			 	* at least 22*6/8=16.5 bytes, so we generate 22. Then we get the first
			 	* 22 base64 characters
			 	*
			 	* those are generated by the combination of password + substring of password and inserted value.
			 	*/
			 	//retrive the username and password from the table.
			 	$select= new Select();
			 	$select->from('user_login');
			 	$select->where(array('user_email' => $signin,'status'=>'Y'));
			 	$rowset = $this->tableGateway->selectWith($select);
			 	$row = $rowset->current();
			 	if(!$row) // if useremail is not found in the  table return 0.
			 		return 0;
			 	else
			 	{
			 		$passnew= $password.substr($password,-3).$row->inserted;
			 		$salt = substr(str_replace('+', '.', base64_encode(sha1($passnew))), 0, 22); // the salt we are generating are further encrypted by sh1 algorithm.
			 		//$newsalt= crypt($salt); //for more security crypt the salt.

			 		// 2y is the bcrypt algorithm selector.
			 		// 15 is the workload factor.
			 		$hash = crypt($password, '$2y$15$' . $salt);
			 		if($hash === crypt($password, $row->password)) // if email match with the row in the table match the password with the hash generated.
			 			return $row;  // return the user id after valid user name and password.
			 		else
			 			return 0;
			 	}


			 }




			 public function resetpassword($userid, $password)
			 {
			 	/* To generate the salt, first generate enough random bytes. Because
			 	 * base64 returns one character for each 6 bits, the we should generate
			 	* at least 22*6/8=16.5 bytes, so we generate 22. Then we get the first
			 	* 22 base64 characters
			 	*
			 	* those are generated by the combination of password + substring of password and inserted value.
			 	*/
			 	//retrive the username and password from the table.
			 	    $date =  date("Y-m-d h:i:s");
			 		$passnew= $password.substr($password,-3).$date;


			 		$salt = substr(str_replace('+', '.', base64_encode(sha1($passnew))), 0, 22); // the salt we are generating are further encrypted by sh1 algorithm.
			 		//$newsalt= crypt($salt); //for more security crypt the salt.
			 		// 2y is the bcrypt algorithm selector.
			 		// 15 is the workload factor.

			 		$hash = crypt($password, '$2y$15$' . $salt);

			 		$data = array (
			 				'password' =>$hash,
			 				'status'   =>'Y',
			 				'inserted' =>$date,
			 		);
			 		$this->tableGateway->update($data,array('user_id'=>$userid));

			 }

			 public  function fetchalluser()
			 {
			 	$select = new Select();
			 	$select->from('user_login');
			 	$select->join('user_associated_role_table','user_associated_role_table.user_id=user_login.user_id',array('user_id' =>'user_id', 'role_id'=>'role_id'),'left');
			 	$select->join('user_role','user_role.role_id=user_associated_role_table.role_id',array('role_value' =>'role_value', 'add_permision'=>'add_permision','edit_permision'=>'edit_permision','update_permision'=>'update_permision','delete_permision'=>'delete_permision'),'left');
			 	$select->join('role_type','role_type.role_value=user_role.role_value',array('role_name' =>'role_name'),'left');
			 	$resultSet = $this->tableGateway->selectWith($select);
			 	return $resultSet;

			 }


			 public  function fetchuser($userid)
			 {
			 	$select = new Select();
			 	$select->from('user_login');
			 	$select->join('user_associated_role_table','user_associated_role_table.user_id=user_login.user_id',array('user_id' =>'user_id', 'role_id'=>'role_id'),'left');
			 	$select->join('user_role','user_role.role_id=user_associated_role_table.role_id',array('role_value' =>'role_value', 'add_permision'=>'add_permision','edit_permision'=>'edit_permision','update_permision'=>'update_permision','delete_permision'=>'delete_permision'),'left');
			 	$select->where(array('user_login.user_id'=>$userid));
			 	$rowset = $this->tableGateway->selectWith($select);
			     $row = $rowset->current();
			 	return $row;
			 }

			 public function changestatusadmin($userid,$status) {
			 			$data = array (
			 					'status'   =>$status
			 			);

			 		$this->tableGateway->update($data,array('user_id'=>$userid));

			 	}


			 public function changestatus($userid) {
			 	$select= new Select();
			 	$select->from('user_login');
			 	$select->where(array('user_id' => $userid));
			 	$rowset = $this->tableGateway->selectWith($select);
			 	$row = $rowset->current();
			 	if($row) // if useremail is not found in the  table return 0.
			  	{

			  		if($row->status=='Y')
			  		{
			  			$data = array (
			  					'status'   =>'N'
			  				);
			  		}
			  		else
			  		{
			  			$data = array (
			  					'status'   =>'Y'
			  			);

			  		}

			  		$this->tableGateway->update($data,array('user_id'=>$userid));

			 	}
			 }

}